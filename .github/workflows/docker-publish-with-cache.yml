name: Build Docker Image (With Package Cache)

on:
  workflow_dispatch:  # Manual trigger only

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          # Remove unused large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          
          # Clear unneeded build caches
          sudo docker image prune -af
          sudo apt-get clean
          
          # Display available disk space
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create simplified Dockerfile for preparation
        run: |
          cat > Dockerfile.prep << 'EOF'
          FROM nvidia/cuda:12.8.0-devel-ubuntu22.04
          
          ENV PYTHONUNBUFFERED=1 \
              DEBIAN_FRONTEND=noninteractive
          
          # Install minimal dependencies
          RUN apt-get update && apt-get install -y --no-install-recommends \
              python3-pip \
              python3-wheel \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          
          WORKDIR /app
          COPY requirements.txt .
          
          # Install dependencies but don't copy application code
          RUN pip install --no-cache-dir wheel setuptools packaging
          RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu128
          RUN pip install --no-cache-dir -r requirements.txt
          
          # Verify installation was successful
          RUN python3 -c "import torch; print(f'PyTorch {torch.__version__} installed successfully')"
          EOF
          
          cat Dockerfile.prep

      - name: Build preparation image with dependencies
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prep
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deps
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Extract metadata for final image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
            latest
            
      - name: Create final Dockerfile
        run: |
          cat > Dockerfile.final << EOF
          FROM ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deps
          
          # Copy the application code
          COPY . .
          
          # Create output directory
          RUN mkdir -p /app/outputs /app/hf_download
          
          # Set environment variables for Hugging Face
          ENV HF_HOME=/app/hf_download
          
          # Expose the default Gradio port
          EXPOSE 7860
          
          # Run the application
          CMD ["python3", "demo_gradio.py", "--server", "0.0.0.0", "--port", "7860"]
          EOF
          
          cat Dockerfile.final

      - name: Build and push final image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deps
            type=gha
          cache-to: type=gha,mode=max
